generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_auth {
  userId          Int     @id @default(autoincrement())
  email       String  @unique
  password    String? // Nullable for OAuth users
  provider    String? // Optional for OAuth (e.g., Google, Facebook)
  providerId  String? // ID from OAuth provider
  user        users   @relation(fields: [userId], references: [id]) // One-to-one relation
}

model users {
  id                Int                @id @default(autoincrement())
  name              String
  auth_user         user_auth?        // One-to-one relation
  companyId         Int?               // Relation to Company
  company           companies?         @relation("company_employees", fields: [companyId], references: [id])
  managerId         Int?               // Relation to Manager (Self-Reference)
  manager           users?             @relation("manager_employee", fields: [managerId], references: [id])
  subordinates      users[]            @relation("manager_employee") // Relation for subordinates
  departmentId      Int?               // Relation to Department
  department        department?        @relation(fields: [departmentId], references: [id])
  designationId     Int?               // Relation to Designation
  designation       designation?       @relation(fields: [designationId], references: [id])
  feedbackGiven     feedback[]         @relation("FeedbackGiven")    // Feedback sent by this user
  feedbackReceived  feedback[]         @relation("FeedbackReceived") // Feedback received by this user
  feedbackRequests  feedback_requests[] @relation("RequestedFeedback") // Feedback requests sent by this user
  feedbackReceivedRequests feedback_requests[] @relation("FeedbackRequests") // Feedback requests received by this user
  headOfDepartments department[]       @relation("DepartmentHead")   // Departments where the user is the head
  meetingsScheduled meetings[]         @relation("ScheduledMeetings") // Meetings created by this user
  meeting_attendees meeting_attendees[]
  adminCompanies    companies[]        @relation("CompanyAdmin")      // Companies administered by this user
  assignedOKRs      okrs[]             @relation("UserOKRs")          // OKRs assigned to this user
  roles             user_roles[]       // Many-to-many relationship with roles
  notifications     notifications[]    // Notifications for the user
  audit             Json               @default("{}") // Replaces createdAt and updatedAt
}

model roles {
  id    Int          @id @default(autoincrement())
  name  String       @unique
  users user_roles[] // Many-to-many relationship
}

model user_roles {
  userId Int
  roleId Int
  user   users @relation(fields: [userId], references: [id])
  role   roles @relation(fields: [roleId], references: [id])
  @@id([userId, roleId]) // Composite primary key
}

model notifications {
  id          Int     @id @default(autoincrement())
  userId      Int     // User receiving the notification
  user        users   @relation(fields: [userId], references: [id])
  type        NotificationType
  message     String
  status      NotificationStatus @default(UNREAD)
  link        String?
  audit       Json    @default("{}") // Replaces createdAt and updatedAt
}

model department {
  id          Int       @id @default(autoincrement())
  name        String
  companyId   Int?      // Relation to Company
  company     companies? @relation(fields: [companyId], references: [id])
  headId      Int?      // Relation to Head
  head        users?    @relation("DepartmentHead", fields: [headId], references: [id])
  employees   users[]
  audit       Json      @default("{}") // Replaces createdAt and updatedAt
}

model designation {
  id          Int       @id @default(autoincrement())
  title       String    @unique // Designation name (e.g., CEO, Developer, etc.)
  description String?   // Optional description for the designation
  users       users[]   // Users with this designation
  audit       Json      @default("{}") // Replaces createdAt and updatedAt
}

model companies {
  id                 Int              @id @default(autoincrement())
  name               String
  address            String?
  description        String?
  adminId            Int?
  admin              users?            @relation("CompanyAdmin", fields: [adminId], references: [id])
  employees          users[]           @relation("company_employees")
  departments        department[]
  okrs               okrs[]            @relation("CompanyOKRs")
  companySetting     company_settings? @relation("CompanyToSetting")
  audit              Json              @default("{}") // Replaces createdAt and updatedAt
}

model okrs {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  companyId   Int?
  company     companies? @relation("CompanyOKRs", fields: [companyId], references: [id])
  userId      Int?
  assignedTo  users?     @relation("UserOKRs", fields: [userId], references: [id])
  keyResults  key_results[]
  audit       Json       @default("{}") // Replaces createdAt and updatedAt
}

model key_results {
  id          Int      @id @default(autoincrement())
  title       String   // Description of the Key Result
  okrId       Int      // Relation to OKR
  okr         okrs     @relation(fields: [okrId], references: [id])
  progress    Float    @default(0) // Progress percentage (0-100)
  audit       Json     @default("{}") // Replaces createdAt and updatedAt
}

model feedback {
  id          Int       @id @default(autoincrement())
  feedbackText String
  isAnonymous Boolean    @default(false)
  visibility  Visibility @default(PUBLIC)
  senderId    Int
  receiverId  Int
  sender      users      @relation("FeedbackGiven", fields: [senderId], references: [id])
  receiver    users      @relation("FeedbackReceived", fields: [receiverId], references: [id])
  audit       Json       @default("{}") // Replaces createdAt and updatedAt
}

model feedback_requests {
  id          Int          @id @default(autoincrement())
  requesterId Int           // User sending the feedback request
  requester   users         @relation("RequestedFeedback", fields: [requesterId], references: [id])
  recipientId Int           // User receiving the feedback request
  recipient   users         @relation("FeedbackRequests", fields: [recipientId], references: [id])
  message     String?       // Optional message
  status      RequestStatus @default(PENDING)
  response    String?       // Response or rejection reason
  audit       Json          @default("{}") // Replaces createdAt and updatedAt
}

model meetings {
  id            Int                @id @default(autoincrement())
  title         String
  description   String?
  scheduledById Int
  scheduledBy   users              @relation("ScheduledMeetings", fields: [scheduledById], references: [id])
  attendees     meeting_attendees[] // Relation for attendees
  scheduledAt   DateTime           // Stores the date and time of the meeting
  agenda        String?
  notes         String?
  noteToSelf    String?
  audit         Json               @default("{}") // Replaces createdAt and updatedAt
}


model company_settings {
  id                  Int     @id @default(autoincrement())
  companyId           Int     @unique
  company             companies @relation("CompanyToSetting", fields: [companyId], references: [id])
  allowAnonymousFeedback Boolean @default(true)
  audit               Json    @default("{}") // Replaces createdAt and updatedAt
}

model meeting_attendees {
  meetingId Int
  userId    Int
  meeting   meetings @relation(fields: [meetingId], references: [id])
  user      users    @relation(fields: [userId], references: [id])
  @@id([meetingId, userId]) // Composite primary key
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum RequestStatus {
  PENDING
  COMPLETED
  REJECTED
  EXPIRED
}

enum NotificationType {
  SYSTEM
  FEEDBACK
  MEETING
  OKR
  GENERAL
}

enum NotificationStatus {
  UNREAD
  READ
}
