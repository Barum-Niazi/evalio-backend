generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_auth {
  user_id      Int       @id // Same ID as users table for strict 1:1 mapping
  email       String    @unique
  password    String?   // Nullable for OAuth users
  user        users     @relation(fields: [user_id], references: [id]) // One-to-one relation
  audit       Json      @default("{}") // Audit JSON for metadata
}

model users {
  id            Int             @id @default(autoincrement())
  auth          user_auth?      // One-to-one relation with user_auth
  roles         user_roles[]    // Many-to-many relationship with roles
  audit         Json            @default("{}") // Audit JSON
  details       user_details?   @relation("user_to_details") // Strict 1-to-1 relationship
}

model user_details {
  user_id       Int             @id // Same ID as users table for strict 1:1 mapping
  user          users           @relation("user_to_details", fields: [user_id], references: [id]) // Strict 1:1 mapping
  name          String
  company_id    Int?            // Relation to Company
  company       companies?      @relation("company_employees", fields: [company_id], references: [id])
  manager_id    Int?            // Relation to Manager (Self-Reference)
  manager       user_details?   @relation("manager_employee", fields: [manager_id], references: [user_id])
  subordinates  user_details[]  @relation("manager_employee") // Relation for subordinates
  department_id Int?            // Relation to Department
  department    department?     @relation(fields: [department_id], references: [id])
  designation_id Int?           // Relation to Designation
  designation   designation?    @relation(fields: [designation_id], references: [id])
  feedback_given feedback[]      @relation("feedback_given")    // Feedback sent by this user
  feedback_received feedback[]   @relation("feedback_received") // Feedback received by this user
  feedback_requests feedback_requests[] @relation("requested_feedback") // Feedback requests sent by this user
  feedback_received_requests feedback_requests[] @relation("feedback_requests") // Feedback requests received by this user
  head_of_departments department[] @relation("department_head") // Departments where the user is the head
  meetings_scheduled meetings[]    @relation("scheduled_meetings") // Meetings created by this user
  meeting_attendees meeting_attendees[]
  notifications  notifications[] // Notifications for the user
  audit          Json            @default("{}") // Audit JSON for metadata
  user_okrs      user_okrs[]
}

model roles {
  id    Int          @id @default(autoincrement())
  name  String       @unique
  users user_roles[] // Many-to-many relationship
  audit Json         @default("{}") // Audit JSON
}
model user_roles {
  user_id Int
  roleId Int
  user   users @relation(fields: [user_id], references: [id])
  role   roles @relation(fields: [roleId], references: [id])
  @@id([user_id, roleId]) // Composite primary key
  audit  Json   @default("{}") // Audit JSON
}
model notifications {
  id          Int     @id @default(autoincrement())
  user_id      Int     // User receiving the notification
  user        user_details   @relation(fields: [user_id], references: [user_id])
  type        notification_type
  message     String
  status      notification_status @default(UNREAD)
  link        String?
  audit       Json    @default("{}") // Replaces createdAt and updatedAt
}

model department {
  id          Int       @id @default(autoincrement())
  name        String
  company_id   Int?      // Relation to Company
  company     companies? @relation(fields: [company_id], references: [id])
  headId      Int?      // Relation to Head
  head        user_details?    @relation("department_head", fields: [headId], references: [user_id])
  employees   user_details[]
  audit       Json      @default("{}") // Replaces createdAt and updatedAt
}

model designation {
  id          Int       @id @default(autoincrement())
  title       String    @unique // Designation name (e.g., CEO, Developer, etc.)
  description String?   // Optional description for the designation
  users       user_details[]   // Users with this designation
  audit       Json      @default("{}") // Replaces createdAt and updatedAt
}

model companies {
  id                 Int              @id @default(autoincrement())
  name               String
  address            String?
  description        String?
  employees          user_details[]   @relation("company_employees") // Employees in the company
  departments        department[]
  okrs               okrs[]           @relation("company_okrs")
  company_setting     company_settings? @relation("company_to_setting")
  audit              Json             @default("{}") // Audit JSON
}
model okrs {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  company_id   Int?
  company     companies? @relation("company_okrs", fields: [company_id], references: [id])
  user_id      Int?
  assigned_to  user_okrs[]
  key_results  key_results[]
  audit       Json       @default("{}") // Replaces createdAt and updatedAt
}

model user_okrs {
  user_id Int
  okr_id  Int
  user   user_details @relation(fields: [user_id], references: [user_id])
  okr    okrs         @relation(fields: [okr_id], references: [id])
  @@id([user_id, okr_id]) // Composite primary key
}


model key_results {
  id          Int      @id @default(autoincrement())
  title       String   // Description of the Key Result
  okr_id       Int      // Relation to OKR
  okr         okrs     @relation(fields: [okr_id], references: [id])
  progress    Float    @default(0) // Progress percentage (0-100)
  audit       Json     @default("{}") // Replaces createdAt and updatedAt
}

model feedback {
  id          Int       @id @default(autoincrement())
  feedback_text String
  is_anonymous Boolean    @default(false)
  visibility  visibility @default(PUBLIC)
  sender_id    Int
  receiver_id  Int
  sender      user_details      @relation("feedback_given", fields: [sender_id], references: [user_id])
  receiver    user_details      @relation("feedback_received", fields: [receiver_id], references: [user_id])
  audit       Json       @default("{}") // Replaces createdAt and updatedAt
}

model feedback_requests {
  id          Int          @id @default(autoincrement())
  requester_id Int           // User sending the feedback request
  requester   user_details        @relation("requested_feedback", fields: [requester_id], references: [user_id])
  recipient_id Int           // User receiving the feedback request
  recipient   user_details      @relation("feedback_requests", fields: [recipient_id], references: [user_id])
  message     String?       // Optional message
  status      request_status @default(PENDING)
  response    String?       // Response or rejection reason
  audit       Json          @default("{}") // Replaces createdAt and updatedAt
}

model meetings {
  id            Int                @id @default(autoincrement())
  title         String
  description   String?
  scheduled_by_id Int
  scheduled_by   user_details              @relation("scheduled_meetings", fields: [scheduled_by_id], references: [user_id])
  attendees     meeting_attendees[] // Relation for attendees
  scheduled_at   DateTime           // Stores the date and time of the meeting
  agenda        String?
  notes         String?
  note_to_self    String?
  audit         Json               @default("{}") // Replaces createdAt and updatedAt
}


model company_settings {
  id                  Int     @id @default(autoincrement())
  company_id           Int     @unique
  company             companies @relation("company_to_setting", fields: [company_id], references: [id])
  allow_anonymous_feedback Boolean @default(true)
  audit               Json    @default("{}") // Replaces createdAt and updatedAt
}

model meeting_attendees {
  meeting_id Int
  user_id    Int
  meeting   meetings @relation(fields: [meeting_id], references: [id])
  user      user_details    @relation(fields: [user_id], references: [user_id])
  @@id([meeting_id, user_id]) // Composite primary key
}

enum visibility {
  PUBLIC
  PRIVATE
}

enum request_status {
  PENDING
  COMPLETED
  REJECTED
  EXPIRED
}

enum notification_type {
  SYSTEM
  FEEDBACK
  MEETING
  OKR
  GENERAL
}

enum notification_status {
  UNREAD
  READ
}
