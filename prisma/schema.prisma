generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_auth {
  user_id      Int       @id // Same ID as users table for strict 1:1 mapping
  email       String    @unique
  password    String?   // Nullable for OAuth users
  google_access_token String? 
  google_refresh_token String?
  google_email String? 
  user        users     @relation(fields: [user_id], references: [id]) // One-to-one relation
  audit       Json      @default("{}") // Audit JSON for metadata
}

model users {
  id            Int             @id @default(autoincrement())
  auth          user_auth?      // One-to-one relation with user_auth
  roles         user_roles[]    // Many-to-many relationship with roles
  audit         Json            @default("{}") // Audit JSON
  details       user_details?   @relation("user_to_details") // Strict 1-to-1 relationship
}

model user_details {
  user_id       Int             @id // Same ID as users table for strict 1:1 mapping
  user          users           @relation("user_to_details", fields: [user_id], references: [id]) // Strict 1:1 mapping
  name          String
  profile_blob  blob?        @relation(fields: [profile_blob_id], references: [id]) // Relation to the blob table
  profile_blob_id Int?       // Foreign key to the blob table
  company_id    Int?            // Relation to Company
  company       companies?      @relation("company_employees", fields: [company_id], references: [id])
  manager_id    Int?            // Relation to Manager (Self-Reference)
  manager       user_details?   @relation("manager_employee", fields: [manager_id], references: [user_id])
  subordinates  user_details[]  @relation("manager_employee") // Relation for subordinates
  department_id Int?            // Relation to Department
  department    department?     @relation(fields: [department_id], references: [id])
  designation_id Int?           // Relation to Designation
  designation   designation?    @relation(fields: [designation_id], references: [id])
  feedback_given feedback[]      @relation("feedback_given")    // Feedback sent by this user
  feedback_received feedback[]   @relation("feedback_received") // Feedback received by this user
  feedback_requests feedback_requests[] @relation("requested_feedback") // Feedback requests sent by this user
  feedback_received_requests feedback_requests[] @relation("feedback_requests") // Feedback requests received by this user
  feedback_about_me feedback_requests[] @relation("feedback_about") // Requests about this user
  head_of_departments department[] @relation("department_head") // Departments where the user is the head
  meetings_scheduled meetings[]    @relation("scheduled_meetings") // Meetings created by this user
  meeting_attendees meeting_attendees[]
  notifications  notifications[] // Notifications for the user
  metadata       Json            @default("{}") // Additional metadata
  audit          Json            @default("{}") // Audit JSON for metadata
  user_okrs      user_okrs[]
}

model roles {
  id    Int          @id @default(autoincrement())
  name  String       @unique
  users user_roles[] // Many-to-many relationship
  audit Json         @default("{}") // Audit JSON
}
model user_roles {
  user_id Int
  role_id Int
  user   users @relation(fields: [user_id], references: [id])
  role   roles @relation(fields: [role_id], references: [id])
  @@id([user_id, role_id]) // Composite primary key
  audit  Json   @default("{}") // Audit JSON
}
model notifications {
  id          Int                 @id @default(autoincrement())
  user_id     Int                 // User receiving the notification
  user        user_details        @relation(fields: [user_id], references: [user_id])
  type_id     Int                 // Foreign key to `lookup` for notification type
  type        lookup              @relation("notification_type", fields: [type_id], references: [id])
  status_id   Int                 // Foreign key to `lookup` for notification status
  status      lookup              @relation("notification_status", fields: [status_id], references: [id])
  message     String
  link        String?
  audit       Json                @default("{}") // Audit metadata
}

model department {
  id          Int       @id @default(autoincrement())
  name        String
  company_id   Int?      // Relation to Company
  company     companies? @relation(fields: [company_id], references: [id])
  headId      Int?      // Relation to Head
  head        user_details?    @relation("department_head", fields: [headId], references: [user_id])
  employees   user_details[]
  audit       Json      @default("{}") // Replaces createdAt and updatedAt

  @@unique([name, company_id])
  okrs okrs[]
}

model designation {
  id          Int       @id @default(autoincrement())
  title       String    @unique // Designation name (e.g., CEO, Developer, etc.)
  description String?   // Optional description for the designation
  users       user_details[]   // Users with this designation
  audit       Json      @default("{}") // Replaces createdAt and updatedAt
}

model companies {
  id                 Int              @id @default(autoincrement())
  name               String
  address            String?
  description        String?
  employees          user_details[]   @relation("company_employees") // Employees in the company
  departments        department[]
  okrs               okrs[]           @relation("company_okrs")
  company_setting     company_settings? @relation("company_to_setting")
  logo_blob          blob?            @relation(fields: [logo_blob_id], references: [id]) // Relation to blob for logo
  logo_blob_id       Int?             // Foreign key to the blob table for the company logo
  metadata           Json          @default("{}") // Additional metadata
  audit              Json             @default("{}") // Audit JSON
}
model okrs {
  id             Int       @id @default(autoincrement())
  parent_okr_id  Int?
  title          String
  description    String?
  
  company_id     Int?
  company        companies? @relation("company_okrs", fields: [company_id], references: [id])

  user_id        Int?     // Relation to User (Owner)
  department_id  Int?       
  department     department? @relation(fields: [department_id], references: [id])

  child_okrs     okrs[]     @relation("parent_okr")
  parent_okr     okrs?      @relation("parent_okr", fields: [parent_okr_id], references: [id])
  due_date      DateTime? // Due date for the OKR

  assigned_to    user_okrs[]
  key_results    key_results[]
  audit          Json       @default("{}")
}

model user_okrs {
  user_id Int
  okr_id  Int
  user   user_details @relation(fields: [user_id], references: [user_id])
  okr    okrs         @relation(fields: [okr_id], references: [id])
  @@id([user_id, okr_id]) // Composite primary key
}


model key_results {
  id          Int      @id @default(autoincrement())
  parent_key_result_id Int? // Relation to parent key result
  title       String   // Description of the Key Result
  okr_id       Int      // Relation to OKR
  okr         okrs     @relation(fields: [okr_id], references: [id])
  child_key_results key_results[] @relation("parent_key_result") // Relation for child key results
  parent_key_result key_results? @relation("parent_key_result", fields: [parent_key_result_id], references: [id]) // Relation for parent key result
  progress    Float    @default(0) // Progress percentage (0-100)
  audit       Json     @default("{}") // Replaces createdAt and updatedAt
}

model feedback {
  id              Int       @id @default(autoincrement())
  title           String
  feedback_text   String
  is_anonymous    Boolean   @default(false)
  visibility_id   Int?       // Foreign key to `lookup` for visibility
  visibility      lookup?    @relation(fields: [visibility_id], references: [id])
  sender_id       Int
  receiver_id     Int
  date            DateTime  @default(now())
  sentiment       String?   // Sentiment analysis result (e.g., "positive", "negative", "neutral")
  sender          user_details @relation("feedback_given", fields: [sender_id], references: [user_id])
  receiver        user_details @relation("feedback_received", fields: [receiver_id], references: [user_id])
  audit           Json      @default("{}") // Audit metadata
  feedback_requests feedback_requests[]
}

model feedback_requests {
  id             Int            @id @default(autoincrement())
  feedback_id    Int?           // Foreign key to `feedback` (optional)
  feedback       feedback?      @relation(fields: [feedback_id], references: [id])
  requester_id   Int            // User sending the feedback request
  requester      user_details   @relation("requested_feedback", fields: [requester_id], references: [user_id])
  recipient_id   Int            // User receiving the feedback request
  recipient      user_details   @relation("feedback_requests", fields: [recipient_id], references: [user_id])
  target_user_id   Int
  target_user      user_details   @relation("feedback_about", fields: [target_user_id], references: [user_id])
  message        String?        // Optional message
  status_id      Int            // Foreign key to `lookup` for status
  status         lookup         @relation(fields: [status_id], references: [id])
  response       String?        // Response or rejection reason
  audit          Json           @default("{}") // Audit metadata
}

model meetings {
  id               Int       @id @default(autoincrement())
  title            String
  description      String?
  scheduled_by_id  Int
  scheduled_by     user_details @relation("scheduled_meetings", fields: [scheduled_by_id], references: [user_id])
  attendees        meeting_attendees[]
  scheduled_at     DateTime
  agenda           String?
  notes            String?
  note_to_self     String?
  google_meet_link String?   // <--- add this field
  audit            Json      @default("{}")
}

model company_settings {
  id                  Int     @id @default(autoincrement())
  company_id           Int     @unique
  company             companies @relation("company_to_setting", fields: [company_id], references: [id])
  allow_anonymous_feedback Boolean @default(true)
  audit               Json    @default("{}") // Replaces createdAt and updatedAt
}

model meeting_attendees {
  meeting_id Int
  user_id    Int
  meeting   meetings @relation(fields: [meeting_id], references: [id])
  user      user_details    @relation(fields: [user_id], references: [user_id])
  @@id([meeting_id, user_id]) // Composite primary key
}

model blob {
  id         Int      @id @default(autoincrement()) // Unique ID for the blob
  name       String   
  mime_type  String  
  data       Bytes    // Binary data for storing the blob itself
  size       Int      // Size of the file in bytes
  audit     Json     @default("{}") // Audit JSON for metadata
  user_details user_details[]
  companies companies[]
}

model tags {
  id         Int      @id @default(autoincrement()) // Unique ID for each tag
  name       String   @unique                      // Name of the tag (e.g., "Teamwork")
  description String?                              // Optional description of the tag
  parent_entity_id Int? // Optional: ID of the parent entity (e.g., OKR, feedback)
  parent_entity_type String? // Optional: Type of the parent entity (e.g., "okr", "feedback")
  tagged_entities tagged_entities[]               // Relation to tagged entities
  audit      Json     @default("{}")               // Audit JSON for metadata
}

model tagged_entities {
  id            Int      @id @default(autoincrement())
  tag_id        Int      // Foreign key to `tags`
  entity_id     Int      // The entity being tagged (e.g., feedback)
  entity_type   String   // The type of entity being tagged (e.g., "feedback", "okr", "meeting")
  reference_id  Int?     // Optional: ID of the referenced entity (e.g., meeting ID)
  reference_type String? // Optional: Type of the referenced entity (e.g., "meeting", "okr")
  audit         Json     @default("{}") // Audit JSON for metadata
  tag           tags     @relation(fields: [tag_id], references: [id]) // Relation to `tags`

  @@index([entity_id, entity_type])             // For quick lookups
  @@index([reference_id, reference_type])      // For efficient cross-referencing
  @@unique([tag_id, entity_id, entity_type])   // Prevent duplicate tags for the same entity
}


model lookup_category {
  id                Int              @id @default(autoincrement())
  code              String           @unique           // Unique code for the category (e.g., "VISIBILITY")
  name              String                              // Display name for the category (e.g., "Visibility")
  parent_id         Int?                                // For hierarchical nesting (optional)
  parentCategory    lookup_category? @relation("ParentCategory", fields: [parent_id], references: [id])
  children          lookup_category[] @relation("ParentCategory")
  audit             Json             @default("{}")    // Audit metadata

  lookup lookup[]
}


model lookup {
  id                Int              @id @default(autoincrement())
  code              String           @unique           // Unique code for the value (e.g., "PUBLIC")
  name              String                              // Display name for the value (e.g., "Public")
  category_id       Int                                 // Foreign key to `lookup_category`
  category          lookup_category  @relation(fields: [category_id], references: [id])
  parent_id         Int?                                // Optional: Hierarchical relationship (e.g., sub-values)
  parent            lookup?          @relation("ParentLookup", fields: [parent_id], references: [id])
  children          lookup[]         @relation("ParentLookup")
  metadata          Json?                               // Additional metadata for the lookup value
  audit             Json             @default("{}")    // Audit metadata
  feedback feedback[]
  feedback_requests feedback_requests[]
  notifications notifications[] @relation("notification_type")
  notifications_status notifications[] @relation("notification_status")
}